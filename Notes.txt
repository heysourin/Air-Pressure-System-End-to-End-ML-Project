*************************************************DAY ****************************1****************************

    Steps of day 1:
        1. git repo
        2. create folder for building project
        3. go inside 'and op'en vscode
        4. create virtual env
        5. activate vir env
        6. create package
        7. setup. and run
        8. requirements file creat and run

    Day 1 Notes:
        1. How to create package?
        2. setup.py as root location.
            i. turn on your env.
            ii. run with `python3 setup.py install`


*************************************************DAY 2********************************************************
    Steps of day 2:
        1. Create function to read requirements.txt from setup.py.
        2. GitHub setup
        3. steup.py:```
            def get_requirements() -> List[str]:
                requirements_list: List[str] = [] #returns list of requirements
                return requirements_list
            ```
            then install using `pip3 install -r requirements.txt`


*************************************************DAY 3********************************************************
    Steps of day 3:
        1. Excpection: exception.py
            i. To see all errors at one place. we can see what error what file.
            ii. Create in sensor(your project root) folder.
        2. Logging: logger.py
            i. Till what point our project is working.
            ii. Create in sensor folder.
        3.  



*******************************************DAY 4**************************************************
    Steps of day 4:
       machine learning project setup


*******************************************DAY 5**************************************************
    Steps of day 5:
        1. Mongodb experiment: mongodb.ipynb
        2. KNN imputer experiment: eda.ipynb



*******************************************DAY 6**************************************************
    Steps of day 6: Data ingestion
    1. setting up .env file.
    2. setting up sensor/__init__.py, for connecting to .env
    3. connect mongodb in sensor/config.py using environment variable
    4. in sensor/utils.py we will upload the data to mongodb using mongo_client from config.py
        i. Then call 'dump_csv_file_to_mongodb_collection' function from main.py
    
    5. creating a folder 'config' outside sensor folder
        i. will create schema.yaml here
        ii. 
        
    6. Creating a foler named 'cloud_storage' inside 'sensor'

    7. Creating a foler named 'components' inside 'sensor'
        i. will create file 'sensor/components/data_ingestion.py'
        ii. will create file 'sensor/components/data_validation.py'
        iii. will create file 'sensor/components/data_transformation.py'
        iv. will create file 'sensor/components/model_trainer.py'
        v. will create file 'sensor/components/model_evaluation.py'
        vi. will create file 'sensor/components/model_pusher.py'

    8. Creating a foler named 'configuration' inside 'sensor'
        i. will create file 'sensor/configuration/mongodb_connection.py'

    9. Creating a foler named 'constant' inside 'sensor'
        i. will create file 'sensor/constant/env_variable.py'
        ii. will create file 'sensor/constant/application.py'
        iii. will create file 'sensor/constant/database.py'
        iv. will create file 'sensor/constant/s3_bucket.py'
        iv. will create folder 'sensor/constant/training_piprline'
            a. __init__.py

    10. Creating a foler named 'data_access' inside 'sensor'

    11. Creating a foler named 'entity' inside 'sensor'
        i. create a file here 'artifacts_entity.py'
        i. create a file here 'config_entity.py'

    12. Creating a foler named 'pipeline' inside 'sensor'
        a. create a file 'training_pipeline.py'

    13. Writing constant variables in 'sensor/constant/data_pipeline/__init__.py'

*****************************************Other Notes*******************************************

1. "-r" in pip install: 'read', it reads every package mentioned in requirements.txt then install them.

2. egg-file: meta-data of all the dependencies.
            gets created while creating setup.py.

3. from setuptools import find_packages: finds all the packages in the file setup.

4. `-e .` in requirements.txt --> Editable mode --> You can directly run `pip3 install -r requirements.txt`, it triggers 'setup.py' to run the 'find_packages()' function, that checks how many packages are installed or not.